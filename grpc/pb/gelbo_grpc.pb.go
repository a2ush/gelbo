// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gelbo.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GelboService_Unary_FullMethodName        = "/elbgrpc.GelboService/Unary"
	GelboService_ServerStream_FullMethodName = "/elbgrpc.GelboService/ServerStream"
	GelboService_ClientStream_FullMethodName = "/elbgrpc.GelboService/ClientStream"
	GelboService_BidiStream_FullMethodName   = "/elbgrpc.GelboService/BidiStream"
)

// GelboServiceClient is the client API for GelboService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GelboServiceClient interface {
	Unary(ctx context.Context, in *GelboRequest, opts ...grpc.CallOption) (*GelboResponse, error)
	ServerStream(ctx context.Context, in *GelboRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GelboResponse], error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GelboRequest, GelboResponse], error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GelboRequest, GelboResponse], error)
}

type gelboServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGelboServiceClient(cc grpc.ClientConnInterface) GelboServiceClient {
	return &gelboServiceClient{cc}
}

func (c *gelboServiceClient) Unary(ctx context.Context, in *GelboRequest, opts ...grpc.CallOption) (*GelboResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GelboResponse)
	err := c.cc.Invoke(ctx, GelboService_Unary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gelboServiceClient) ServerStream(ctx context.Context, in *GelboRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GelboResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GelboService_ServiceDesc.Streams[0], GelboService_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GelboRequest, GelboResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GelboService_ServerStreamClient = grpc.ServerStreamingClient[GelboResponse]

func (c *gelboServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GelboRequest, GelboResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GelboService_ServiceDesc.Streams[1], GelboService_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GelboRequest, GelboResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GelboService_ClientStreamClient = grpc.ClientStreamingClient[GelboRequest, GelboResponse]

func (c *gelboServiceClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GelboRequest, GelboResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GelboService_ServiceDesc.Streams[2], GelboService_BidiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GelboRequest, GelboResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GelboService_BidiStreamClient = grpc.BidiStreamingClient[GelboRequest, GelboResponse]

// GelboServiceServer is the server API for GelboService service.
// All implementations must embed UnimplementedGelboServiceServer
// for forward compatibility.
type GelboServiceServer interface {
	Unary(context.Context, *GelboRequest) (*GelboResponse, error)
	ServerStream(*GelboRequest, grpc.ServerStreamingServer[GelboResponse]) error
	ClientStream(grpc.ClientStreamingServer[GelboRequest, GelboResponse]) error
	BidiStream(grpc.BidiStreamingServer[GelboRequest, GelboResponse]) error
	mustEmbedUnimplementedGelboServiceServer()
}

// UnimplementedGelboServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGelboServiceServer struct{}

func (UnimplementedGelboServiceServer) Unary(context.Context, *GelboRequest) (*GelboResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedGelboServiceServer) ServerStream(*GelboRequest, grpc.ServerStreamingServer[GelboResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedGelboServiceServer) ClientStream(grpc.ClientStreamingServer[GelboRequest, GelboResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedGelboServiceServer) BidiStream(grpc.BidiStreamingServer[GelboRequest, GelboResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedGelboServiceServer) mustEmbedUnimplementedGelboServiceServer() {}
func (UnimplementedGelboServiceServer) testEmbeddedByValue()                      {}

// UnsafeGelboServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GelboServiceServer will
// result in compilation errors.
type UnsafeGelboServiceServer interface {
	mustEmbedUnimplementedGelboServiceServer()
}

func RegisterGelboServiceServer(s grpc.ServiceRegistrar, srv GelboServiceServer) {
	// If the following call pancis, it indicates UnimplementedGelboServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GelboService_ServiceDesc, srv)
}

func _GelboService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GelboRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GelboServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GelboService_Unary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GelboServiceServer).Unary(ctx, req.(*GelboRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GelboService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GelboRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GelboServiceServer).ServerStream(m, &grpc.GenericServerStream[GelboRequest, GelboResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GelboService_ServerStreamServer = grpc.ServerStreamingServer[GelboResponse]

func _GelboService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GelboServiceServer).ClientStream(&grpc.GenericServerStream[GelboRequest, GelboResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GelboService_ClientStreamServer = grpc.ClientStreamingServer[GelboRequest, GelboResponse]

func _GelboService_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GelboServiceServer).BidiStream(&grpc.GenericServerStream[GelboRequest, GelboResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GelboService_BidiStreamServer = grpc.BidiStreamingServer[GelboRequest, GelboResponse]

// GelboService_ServiceDesc is the grpc.ServiceDesc for GelboService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GelboService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elbgrpc.GelboService",
	HandlerType: (*GelboServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _GelboService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _GelboService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _GelboService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _GelboService_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gelbo.proto",
}
